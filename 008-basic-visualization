{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Cortez_ethridge_ASSIGN8.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bayaniblues/Lambda-precourse/blob/master/008-basic-visualization\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZvNsvUNNlZbi",
        "colab_type": "text"
      },
      "source": [
        "---\n",
        "# Lambda School Data Science - Intro to Pandas\n",
        "---\n",
        "# Assignment 08 - Basic Visualizations\n",
        "---\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y8HUQb0OOztX",
        "colab_type": "text"
      },
      "source": [
        "##STOP! BEFORE GOING ANY FURTHER...  \n",
        "\n",
        "\n",
        "1. Click \"File\" at the top.\n",
        "2. Then, \"Save a Copy in Drive.\"\n",
        "3. Change the file name to \"FIRSTNAME_LASTNAME_assign8\"  \n",
        "\n",
        "Now you have a copy of this notebook in your Drive account. This is the copy you'll edit and submit. Be sure to do this for ***every*** assignment!\n",
        "\n",
        "---\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KtocS8OraPjo",
        "colab_type": "text"
      },
      "source": [
        "## Part 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xMq6Of2Gt24o",
        "colab_type": "text"
      },
      "source": [
        "### 1.1 - Import pandas & matplotlib\n",
        "\n",
        "Use the standard imports as demonstrated in lecture."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "h3r0IvHVuGJb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import pandas and matplotlib\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DvYie7qokbDH",
        "colab_type": "text"
      },
      "source": [
        "### 1.2 - Import the data in the CSV file\n",
        "You can find the data at this [link](https://raw.githubusercontent.com/plotly/datasets/master/data.csv). The data should have a shape of `(150000, 11)`. Use this [resource](https://github.com/plotly/datasets/blob/master/data_dictionary.csv) for context."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UNJo_50VktRs",
        "colab_type": "code",
        "outputId": "dca73373-5c22-4cc7-e275-5bfd24fec3ee",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Read in the csv file using the above URL\n",
        "\n",
        "df = pd.read_csv(\"https://raw.githubusercontent.com/plotly/datasets/master/data.csv\")\n",
        "df.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(150000, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CYy4Zp5pk7tS",
        "colab_type": "text"
      },
      "source": [
        "### 1.3 - Quickly inspect the head\n",
        "\n",
        "As we have done before, one of the first things to do is to look at the first 5-10 rows of data. You'll have to scroll to the right to see the rest of the columns."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lIxLoTfGl910",
        "colab_type": "code",
        "outputId": "2b9cc3bd-7f12-4548-cfdf-1a2e93eb35d7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        }
      },
      "source": [
        "# Look at the DataFrame head\n",
        "\n",
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>0.766127</td>\n",
              "      <td>45</td>\n",
              "      <td>2</td>\n",
              "      <td>0.802982</td>\n",
              "      <td>9120.0</td>\n",
              "      <td>13</td>\n",
              "      <td>0</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0.957151</td>\n",
              "      <td>40</td>\n",
              "      <td>0</td>\n",
              "      <td>0.121876</td>\n",
              "      <td>2600.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0.658180</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>0.085113</td>\n",
              "      <td>3042.0</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0.233810</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>0.036050</td>\n",
              "      <td>3300.0</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0.907239</td>\n",
              "      <td>49</td>\n",
              "      <td>1</td>\n",
              "      <td>0.024926</td>\n",
              "      <td>63588.0</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   SeriousDlqin2yrs  ...  NumberOfDependents\n",
              "0                 1  ...                 2.0\n",
              "1                 0  ...                 1.0\n",
              "2                 0  ...                 0.0\n",
              "3                 0  ...                 0.0\n",
              "4                 0  ...                 0.0\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "125CV0jpQ5vT",
        "colab_type": "text"
      },
      "source": [
        "### 1.4 - Inspect the tail\n",
        "\n",
        "This is an easy way to see how many rows we have."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lMafok6zoGB-",
        "colab_type": "code",
        "outputId": "3002e39c-1c7e-4495-dd7c-13023bab7204",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 214
        }
      },
      "source": [
        "# Look at the last rows of the DataFrame\n",
        "df.tail()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>149995</th>\n",
              "      <td>0</td>\n",
              "      <td>0.040674</td>\n",
              "      <td>74</td>\n",
              "      <td>0</td>\n",
              "      <td>0.225131</td>\n",
              "      <td>2100.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149996</th>\n",
              "      <td>0</td>\n",
              "      <td>0.299745</td>\n",
              "      <td>44</td>\n",
              "      <td>0</td>\n",
              "      <td>0.716562</td>\n",
              "      <td>5584.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149997</th>\n",
              "      <td>0</td>\n",
              "      <td>0.246044</td>\n",
              "      <td>58</td>\n",
              "      <td>0</td>\n",
              "      <td>3870.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149998</th>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>30</td>\n",
              "      <td>0</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>5716.0</td>\n",
              "      <td>4</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149999</th>\n",
              "      <td>0</td>\n",
              "      <td>0.850283</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0.249908</td>\n",
              "      <td>8158.0</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        SeriousDlqin2yrs  ...  NumberOfDependents\n",
              "149995                 0  ...                 0.0\n",
              "149996                 0  ...                 2.0\n",
              "149997                 0  ...                 0.0\n",
              "149998                 0  ...                 0.0\n",
              "149999                 0  ...                 0.0\n",
              "\n",
              "[5 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CfUYIGiuQ-o0",
        "colab_type": "text"
      },
      "source": [
        "### 1.5 - Shape of the DataFrame\n",
        "\n",
        "Look at the shape of the `df` - does it correspond to what we expected? If not, go back to the cell where you read in your data and try again."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hQGGcDNYQ-_b",
        "colab_type": "code",
        "outputId": "f9a9bece-974d-463f-f2e9-1cac6674e853",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# DataFrame shape\n",
        "\n",
        "df.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(150000, 11)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OPzmCwizHi2C",
        "colab_type": "text"
      },
      "source": [
        "### 1.6 - Do you need to change the index?\n",
        "\n",
        "If the csv already has an index then there will sometime be an extra index added using the default arguments of `pd_read_csv()`. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PnwCHiUoHjLl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# If you want to chenge the index, you can do it here.\n",
        "\n",
        "# No index change is necessary"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7ecnTkAIQ_MW",
        "colab_type": "text"
      },
      "source": [
        "### 1.7 - Missing values\n",
        "\n",
        "Check your DataFrame for missing values. You don't need to fill them in right now, but don't forget that they're there!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "neAu4dBrdJtp",
        "colab_type": "code",
        "outputId": "0e514b20-ed65-4368-82b0-6dc954b0d946",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df.isnull().sum()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SeriousDlqin2yrs                            0\n",
              "RevolvingUtilizationOfUnsecuredLines        0\n",
              "age                                         0\n",
              "NumberOfTime30-59DaysPastDueNotWorse        0\n",
              "DebtRatio                                   0\n",
              "MonthlyIncome                           29731\n",
              "NumberOfOpenCreditLinesAndLoans             0\n",
              "NumberOfTimes90DaysLate                     0\n",
              "NumberRealEstateLoansOrLines                0\n",
              "NumberOfTime60-89DaysPastDueNotWorse        0\n",
              "NumberOfDependents                       3924\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_1U2esBGQ_XF",
        "colab_type": "code",
        "outputId": "8bcf8ed2-47ea-4b98-d239-03e3ea81256c",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 422
        }
      },
      "source": [
        "# Check for missing values\n",
        "\n",
        "df[df.isnull().any(axis=1)]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0</td>\n",
              "      <td>0.305682</td>\n",
              "      <td>57</td>\n",
              "      <td>0</td>\n",
              "      <td>5710.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0</td>\n",
              "      <td>0.116951</td>\n",
              "      <td>27</td>\n",
              "      <td>0</td>\n",
              "      <td>46.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0</td>\n",
              "      <td>0.061086</td>\n",
              "      <td>78</td>\n",
              "      <td>0</td>\n",
              "      <td>2058.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>10</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>0</td>\n",
              "      <td>0.083418</td>\n",
              "      <td>62</td>\n",
              "      <td>0</td>\n",
              "      <td>977.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0</td>\n",
              "      <td>0.072898</td>\n",
              "      <td>81</td>\n",
              "      <td>0</td>\n",
              "      <td>75.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>7</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149976</th>\n",
              "      <td>0</td>\n",
              "      <td>0.000627</td>\n",
              "      <td>76</td>\n",
              "      <td>0</td>\n",
              "      <td>60.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149977</th>\n",
              "      <td>0</td>\n",
              "      <td>0.236450</td>\n",
              "      <td>29</td>\n",
              "      <td>0</td>\n",
              "      <td>349.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149984</th>\n",
              "      <td>0</td>\n",
              "      <td>0.037548</td>\n",
              "      <td>84</td>\n",
              "      <td>0</td>\n",
              "      <td>25.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149992</th>\n",
              "      <td>0</td>\n",
              "      <td>0.871976</td>\n",
              "      <td>50</td>\n",
              "      <td>0</td>\n",
              "      <td>4132.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>11</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>149997</th>\n",
              "      <td>0</td>\n",
              "      <td>0.246044</td>\n",
              "      <td>58</td>\n",
              "      <td>0</td>\n",
              "      <td>3870.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>29731 rows × 11 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "        SeriousDlqin2yrs  ...  NumberOfDependents\n",
              "6                      0  ...                 0.0\n",
              "8                      0  ...                 NaN\n",
              "16                     0  ...                 0.0\n",
              "32                     0  ...                 0.0\n",
              "41                     0  ...                 0.0\n",
              "...                  ...  ...                 ...\n",
              "149976                 0  ...                 0.0\n",
              "149977                 0  ...                 0.0\n",
              "149984                 0  ...                 0.0\n",
              "149992                 0  ...                 3.0\n",
              "149997                 0  ...                 0.0\n",
              "\n",
              "[29731 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pcnr3Az9wmxf",
        "colab_type": "text"
      },
      "source": [
        "### 1.8 - Answer the following **two questions** about missing values:\n",
        "\n",
        "(run the cell and **enter the input** when prompted)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8AzcFsPx0bv3",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Mj7Y8MYRwvKx",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Missing values of MonthlyIncome\n",
        "missing_MI = 29731\n",
        "\n",
        "# Missing values of age\n",
        "missing_age = 0"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FtfX91dsyADf",
        "colab_type": "text"
      },
      "source": [
        "### 1.8 - Solution: Missing values\n",
        "\n",
        "Run the following cell to check your answers to the above questions."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jTGoFKRS_f3Y",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# DO NOT EDIT THIS CELL\n",
        "# SOLUTION 1.8\n",
        "\n",
        "# Check the values that were input above\n",
        "assert int(missing_MI) == 29731, \"Your MonthlyIncome missing values is incorrect.\"\n",
        "assert int(missing_age) == 0, \"There are no missing values for 'age'.\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W6IpdGNPaIZE",
        "colab_type": "text"
      },
      "source": [
        "---\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fnSfv8KeaKnK",
        "colab_type": "text"
      },
      "source": [
        "## Part 2\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d_bzeXa-k4mn",
        "colab_type": "text"
      },
      "source": [
        "### 2.1 - Discrete versus continuous values\n",
        "\n",
        "There are 11 features (columns) in the above DataFrame. Let's answer a few questions about if they are continuous or discrete.\n",
        "\n",
        "**Run the following cell and input your answers when prompted.**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0qFgGoQRA2vg",
        "colab_type": "code",
        "outputId": "c711dfc5-1e98-4b4f-9192-87554ee08a2f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 85
        }
      },
      "source": [
        "# DO NOT EDIT THIS CELL\n",
        "# ANSWER INPUT 2.1\n",
        "\n",
        "# Questions: discrete or continuous?\n",
        "print(\"Is 'NumberOfDependents' discrete or continuous? Answer d or c.\")\n",
        "num_depnd = input()\n",
        "\n",
        "print(\"Is 'DebtRatio' discrete or continuous? Answer d or c.\")\n",
        "ratio = input()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Is 'NumberOfDependents' discrete or continuous? Answer d or c.\n",
            "d\n",
            "Is 'DebtRatio' discrete or continuous? Answer d or c.\n",
            "c\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZIdZB0htCP-K",
        "colab_type": "text"
      },
      "source": [
        "### 2.1 Solution: Run the following cell to check the answers you input above."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hsx5sCQyCWFN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# DO NOT EDIT THIS CELL\n",
        "# SOLUTION 2.1\n",
        "\n",
        "# Check answers\n",
        "assert num_depnd == 'd', \"NumberOfDependents is discrete (people are whole numbers!).\"\n",
        "assert ratio == 'c', \"The DebtRatio is a continuous variable; it is a ratio.\""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1AK6gGZDlGQJ",
        "colab_type": "text"
      },
      "source": [
        "### 2.2 - Plot each feature with the appropriate visualization\n",
        "\n",
        "Use the lecture notebook to help you determine which type of plot is appropriate for each type of distibution."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WVBvMFDGliY_",
        "colab_type": "text"
      },
      "source": [
        "#### 2.3 Histograms\n",
        "\n",
        "Choose a feature from your DataFrame to plot as a histogram. \n",
        "\n",
        "Hint: histograms are excellent for plotting continuous data like the DebtRatio or something similar."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cI4iZirolN1o",
        "colab_type": "code",
        "outputId": "993dab81-a69c-4578-a402-7b08e69f0d97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 264
        }
      },
      "source": [
        "# Plot a histogram\n",
        "df['age'].hist(bins=40)\n",
        "plt.show()\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ibjkhv1Ylngm",
        "colab_type": "text"
      },
      "source": [
        "#### 2.4 Bar charts\n",
        "\n",
        "Choose a feature to plot on a bar chart. Remember that you need to get the value counts for each \"bar\" in your plot. Hint: use a feature that doesn't have many \"bar\"; your plot will look cleaner."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oRBSckeZlOJj",
        "colab_type": "code",
        "outputId": "1af4e75f-3095-40a7-fb8a-24b09561d242",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        }
      },
      "source": [
        "# Create your bar plot\n",
        "# Make sure to use a feature that\n",
        "\n",
        "df['NumberOfDependents'].value_counts().plot(kind='bar');"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uW_GNnTulp7M",
        "colab_type": "text"
      },
      "source": [
        "#### 2.5 Scatterplots\n",
        "\n",
        "Let's create a scatter plot! These types of plots are good to look at the relationship between two numerical data types. For the best results, think about two variables that could have a relationship that shows a trend."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wu9sfomalOSS",
        "colab_type": "code",
        "outputId": "5dfdb40d-ac21-450e-e222-e811376ce05d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "source": [
        "# Create your scatter plot\n",
        "\n",
        "df.plot.scatter(x='age', y='DebtRatio');"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K_01y7CMl6Cy",
        "colab_type": "text"
      },
      "source": [
        "Describe the relationship between the two variables you chose. You can also write a few sentences explaining *why* you chose to plots those variables against each other.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zpldP6QBNlch",
        "colab_type": "text"
      },
      "source": [
        "#### Your answer here:"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVqrNo1VlzH6",
        "colab_type": "text"
      },
      "source": [
        "#### 2. 6 Boxplots\n",
        "\n",
        "As we saw in lecture, boxplots are a good way to identify outliers or data points that are anomalous in some way. But first, it's a great idea to use the pandas `describe()` method to look at each numerical feature and its distribution."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5WNrYLg_u0YL",
        "colab_type": "code",
        "outputId": "f410179b-b60e-475b-df88-3f1d226e5367",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 324
        }
      },
      "source": [
        "# Describe your DataFrame\n",
        "df.describe()\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>SeriousDlqin2yrs</th>\n",
              "      <th>RevolvingUtilizationOfUnsecuredLines</th>\n",
              "      <th>age</th>\n",
              "      <th>NumberOfTime30-59DaysPastDueNotWorse</th>\n",
              "      <th>DebtRatio</th>\n",
              "      <th>MonthlyIncome</th>\n",
              "      <th>NumberOfOpenCreditLinesAndLoans</th>\n",
              "      <th>NumberOfTimes90DaysLate</th>\n",
              "      <th>NumberRealEstateLoansOrLines</th>\n",
              "      <th>NumberOfTime60-89DaysPastDueNotWorse</th>\n",
              "      <th>NumberOfDependents</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>1.202690e+05</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>150000.000000</td>\n",
              "      <td>146076.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.066840</td>\n",
              "      <td>6.048438</td>\n",
              "      <td>52.295207</td>\n",
              "      <td>0.421033</td>\n",
              "      <td>353.005076</td>\n",
              "      <td>6.670221e+03</td>\n",
              "      <td>8.452760</td>\n",
              "      <td>0.265973</td>\n",
              "      <td>1.018240</td>\n",
              "      <td>0.240387</td>\n",
              "      <td>0.757222</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.249746</td>\n",
              "      <td>249.755371</td>\n",
              "      <td>14.771866</td>\n",
              "      <td>4.192781</td>\n",
              "      <td>2037.818523</td>\n",
              "      <td>1.438467e+04</td>\n",
              "      <td>5.145951</td>\n",
              "      <td>4.169304</td>\n",
              "      <td>1.129771</td>\n",
              "      <td>4.155179</td>\n",
              "      <td>1.115086</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.029867</td>\n",
              "      <td>41.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.175074</td>\n",
              "      <td>3.400000e+03</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.154181</td>\n",
              "      <td>52.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.366508</td>\n",
              "      <td>5.400000e+03</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.559046</td>\n",
              "      <td>63.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.868254</td>\n",
              "      <td>8.249000e+03</td>\n",
              "      <td>11.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>50708.000000</td>\n",
              "      <td>109.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>329664.000000</td>\n",
              "      <td>3.008750e+06</td>\n",
              "      <td>58.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>54.000000</td>\n",
              "      <td>98.000000</td>\n",
              "      <td>20.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       SeriousDlqin2yrs  ...  NumberOfDependents\n",
              "count     150000.000000  ...       146076.000000\n",
              "mean           0.066840  ...            0.757222\n",
              "std            0.249746  ...            1.115086\n",
              "min            0.000000  ...            0.000000\n",
              "25%            0.000000  ...            0.000000\n",
              "50%            0.000000  ...            0.000000\n",
              "75%            0.000000  ...            1.000000\n",
              "max            1.000000  ...           20.000000\n",
              "\n",
              "[8 rows x 11 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-gYiCYOXO5uf",
        "colab_type": "text"
      },
      "source": [
        "Using the results from the above cell, chose a feature to create a boxplot for. You can optionally group by another column in your DataFrame. For example, the MonthlyIncome could be grouped by DebtRatio. There are many choices here - it's up to you to decide what features are best suited to a boxplot. "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "K1JKkaf4l0vJ",
        "colab_type": "code",
        "outputId": "84fc0fa7-451b-419b-971e-7aea942bf996",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        }
      },
      "source": [
        "# Create your boxplot\n",
        "\n",
        "df.boxplot(column='age', by='NumberOfOpenCreditLinesAndLoans')\n",
        "plt.show()\n",
        "\n",
        "# people have less open credit lines when they get older"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XZPv_jBJl1Yj",
        "colab_type": "text"
      },
      "source": [
        "#### Any outliers?\n",
        "\n",
        "What does your boxplot look like? Some of the features choices may make your boxplot very crowded but see if you can adjust the plot (or your choices) to see what you are trying to visualize more clearly. \n",
        "\n",
        "Write a few sentences below about what features you chose to plot and if you can identify any outliers.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2UO8IOgol4A9",
        "colab_type": "text"
      },
      "source": [
        "**Your answer here.**\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D3B3Z8GvcY4Q",
        "colab_type": "text"
      },
      "source": [
        "### Submit your assignment notebook! (Make sure you've changed the name to FIRSTNAME_LASTNAME_assign8): \n",
        "\n",
        "1.  Click the Share button in the upper-right hand corner of the notebook.\n",
        "2.  Get the shareable link.\n",
        "3.  Set condition to: \"Anyone with the link can comment.\"\n",
        "\n",
        "\n",
        "---\n"
      ]
    }
  ]
}